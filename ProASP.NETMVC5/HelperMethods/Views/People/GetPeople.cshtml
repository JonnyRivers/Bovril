@using HelperMethods.Models

@model String

@{
    ViewBag.Title = "GetPeople";
    Layout = "~/Views/Shared/_Layout.cshtml";

    AjaxOptions ajaxOptions = new AjaxOptions
    {
        UpdateTargetId = "tableBody",
        Url = Url.Action("GetPeopleData"),
        LoadingElementId = "loading",
        LoadingElementDuration = 1000,
        Confirm = "Do you wish to request new data?"
    };
}

<!--by passing JSON data and building the view in javascript we reduce load on the server-->
<script type="text/javascript">
    function OnGetPeopleDataJsonSuccess(data) {
        var target = $("#tableBody");
        target.empty();
        for (var i = 0; i < data.length; i++) {
            var person = data[i];
            target.append(
                "<tr>" +
                    "<td>" + person.FirstName + "</td>" +
                    "<td>" + person.LastName + "</td>" +
                    "<td>" + person.Role + "</td>" +
                "</tr>");
        }
    }
</script>

<h2>GetPeople</h2>

<div id="loading" class="load" style="display:none">
    <p>Loading Data...</p>
</div>

<table>
    <thead>
        <tr>
            <th>First</th>
            <th>Last</th>
            <th>Role</th>
        </tr>
    </thead>
    <tbody id="tableBody">
        @Html.Action("GetPeopleData", new { selectedRoleText = Model })
    </tbody>
</table>

@using (Ajax.BeginForm(ajaxOptions))
{
    <div>
        <!--note that the ddl name must match the function argument - public ActionResult GetPeople(String selectedRoleText)-->
        @Html.DropDownList(
             "selectedRoleText",
            new SelectList(
                 new[] { "All" }.Concat(Enum.GetNames(typeof(Role)))))
        <button type="submit">Submit</button>
    </div>
}

<!--here we create ajax links.  These use a different code path (GetPeopleDataJson) to show off Json processing-->
<div>
    @foreach (String role in Enum.GetNames(typeof(Role)))
    {
        <div class="ajaxLink">
            @Ajax.ActionLink(
                role,
                "GetPeople",
                new { selectedRoleText = role },
                new AjaxOptions
                {
                    UpdateTargetId = "tableBody",
                    Url = Url.Action("GetPeopleDataJson", new { selectedRoleText = role }),
                    OnSuccess = "OnGetPeopleDataJsonSuccess"
                }
            )
        </div>
    }
</div>